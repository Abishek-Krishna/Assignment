
-------------------------------------------------------------------------------------TASK 1 
CREATE DATABASE TechShop;


USE TechShop;


CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(10),
    LastName VARCHAR(10),
    Email VARCHAR(10),
    Phone VARCHAR(10),
    Address VARCHAR(25)
);


CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(10),
    Description VARCHAR(25),
    Price INT
);


CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID),
    OrderDate DATE,
    TotalAmount INT
);

CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT FOREIGN KEY REFERENCES Orders(OrderID),
    ProductID INT FOREIGN KEY REFERENCES Products(ProductID),
    Quantity INT
);


CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY,
    ProductID INT FOREIGN KEY REFERENCES Products(ProductID),
    QuantityInStock INT,
    LastStockUpdate DATETIME
);

-----------------------------------------------------Task 2 -----------------------------------------------------------------------------------

--1 . Write an SQL query to retrieve the names and emails of all customers.
   
   SELECT FirstName,Email FROM Customers

--2 . Write an SQL query to list all orders with their order dates and corresponding customer names.
--3 . Write an SQL query to insert a new customer record into the "Customers" table. Include customer information such as name, email, and address.

      INSERT INTO Customers(CustomerID,FirstName,LastName, Email, Phone, Address) VALUES (11, 'ram', 'mar', 'ram@.com',9876523567, 'mumbai')

--4 . Write an SQL query to update the prices of all electronic gadgets in the "Products" table by increasing them by 10% 
      
	  UPDATE Products SET Price = Price * 1.1 
      select * from Products

--5 . Write an SQL query to delete a specific order and its associated order details from the "Orders" and "OrderDetails" tables. Allow users to input the order ID as a parameter.
      
	  DELETE FROM OrderDetails WHERE OrderID = 6;
      select * from OrderDetails
	  SELECT * FROM Orders
	  
--6 . Write an SQL query to insert a new order into the "Orders" table. Include the customer ID, order date, and any other necessary information.
      
	   INSERT INTO Orders(OrderID,CustomerID,OrderDate, TotalAmount) VALUES (11, 11, '2024-03-12', 987)

--7 . Write an SQL query to update the contact information (e.g., email and address) of a specific customer in the "Customers" table. Allow users to input the customer ID and new contact information.
      
	  UPDATE Customers SET Email = 'new@.com',Address = 'mumbai'
      WHERE CustomerID = 8;
	  select * from Customers

--8 . Write an SQL query to recalculate and update the total cost of each order in the "Orders" table based on the prices and quantities in the "OrderDetails" table

      UPDATE Orders SET TotalAmount = (SELECT SUM(Quantity * Price) FROM OrderDetails WHERE Orders.OrderID = OrderDetails.OrderID)

--9 . Write an SQL query to delete all orders and their associated order details for a specific customer from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID as a parameter.

      DELETE FROM Orders WHERE CustomerID = 7;


--10. Write an SQL query to insert a new electronic gadget product into the "Products" table, including product name, category, price, and any other relevant details.

      INSERT INTO Products (ProductID,ProductName, Price, Description) VALUES (11,'Phone' , 99, 'Electronics');
	  select * from Products
--11. Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from "Pending" to "Shipped"). Allow users to input the order ID and the new status.

      select Statusdetail from Orders where OrderID=1

--12. Write an SQL query to calculate and update the number of orders placed by each customer in the "Customers" table based on the data in the "Orders" table.

     ALTER TABLE Customers ADD NumOrders INT

     UPDATE Customers SET NumOrders = (SELECT COUNT(*) FROM Orders WHERE Orders.CustomerID = Customers.CustomerID);

	 select * from Customers
-----------------------------------------------------Task 3 -------------------------------------------------

--1  Write an SQL query to retrieve a list of all orders along with customer information (e.g., customer name) for each order.

SELECT
    Orders.OrderID,
    Orders.OrderDate,
    Customers.FirstName + ' ' + Customers.LastName AS CustomerName
FROM
    Orders, Customers
WHERE
    Orders.CustomerID = Customers.CustomerID;

--2 Write an SQL query to find the total revenue generated by each electronic gadget product. Include the product name and the total revenue.

SELECT
    Products.ProductName,
    SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM
    Products, OrderDetails
WHERE
    Products.ProductID = OrderDetails.ProductID
GROUP BY
    Products.ProductName;

--3 Write an SQL query to list all customers who have made at least one purchase. Include their names and contact information

SELECT DISTINCT
    Customers.CustomerID,
    Customers.FirstName,
    Customers.LastName,
    Customers.Email,
    Customers.Phone,
    Customers.Address
FROM
    Customers, Orders
WHERE
    Customers.CustomerID = Orders.CustomerID;


--4 Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered. Include the product name and the total quantity ordered.

SELECT TOP 1
    Products.ProductName,
    SUM(OrderDetails.Quantity) AS TotalQuantityOrdered
FROM
    Products, OrderDetails
WHERE
    Products.ProductID = OrderDetails.ProductID
GROUP BY
    Products.ProductName
ORDER BY
    TotalQuantityOrdered DESC;

--5 Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories.
	
	SELECT
    Products.ProductName,
    Products.Description
FROM
    Products;


--6 Write an SQL query to calculate the average order value for each customer. Include the customer's name and their average order value.

  SELECT
    Customers.CustomerID,
    Customers.FirstName + ' ' + Customers.LastName AS CustomerName,
    AVG(Orders.TotalAmount) AS AverageOrderValue
FROM
    Customers, Orders
WHERE
    Customers.CustomerID = Orders.CustomerID
GROUP BY
    Customers.CustomerID, Customers.FirstName, Customers.LastName;

--7 Write an SQL query to find the order with the highest total revenue. Include the order ID, customer information, and the total revenue

SELECT TOP 1
    Orders.OrderID,
    Customers.FirstName + ' ' + Customers.LastName AS CustomerName,
    Orders.TotalAmount
FROM
    Orders, Customers
WHERE
    Orders.CustomerID = Customers.CustomerID
ORDER BY
    TotalAmount DESC;

 --8 Write an SQL query to list electronic gadgets and the number of times each product has been  ordered.

SELECT
    Products.ProductName,
    COUNT(OrderDetails.OrderID) AS OrderCount
FROM
    Products, OrderDetails
WHERE
    Products.ProductID = OrderDetails.ProductID
GROUP BY
    Products.ProductName;

--9 Write an SQL query to find customers who have purchased a specific electronic gadget product. Allow users to input the product name as a parameter

SELECT DISTINCT
    Customers.CustomerID,
    Customers.FirstName,
    Customers.LastName
FROM
    Customers, Orders, OrderDetails, Products
WHERE
    Customers.CustomerID = Orders.CustomerID
    AND Orders.OrderID = OrderDetails.OrderID
    AND OrderDetails.ProductID = Products.ProductID
    AND Products.ProductName = 'Laptop';


--10 Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period. Allow users to input the start and end dates as parameters.

DECLARE @StartDate DATE = '2024-01-01';
DECLARE @EndDate DATE = '2024-12-31';

SELECT
    SUM(Orders.TotalAmount) AS TotalRevenue
FROM
    Orders
WHERE
    OrderDate BETWEEN @StartDate AND @EndDate;

-----------------------------------------------------Task 4 ---------------------------------------------------------------------------------------
--1  Write an SQL query to find out which customers have not placed any orders.
SELECT
    CustomerID,
    FirstName,
    LastName
FROM
    Customers
WHERE
    CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);


--2 Write an SQL query to find the total number of products available for sale.

 SELECT COUNT(*) AS TotalProducts
FROM Products;

select * from Products

--3 Write an SQL query to calculate the total revenue generated by TechShop.

SELECT SUM(TotalAmount) AS TotalRevenue
FROM Orders;


--4 Write an SQL query to calculate the average quantity ordered for products in a specific category. Allow users to input the category name as a parameter.
 SELECT AVG(o.Quantity) AS AverageQuantityOrdered, p.Description FROM OrderDetails o JOIN Products p ON o.ProductID = p.ProductID WHERE p.Description = 'Compact' 
GROUP BY p.Description


--5 Write an SQL query to calculate the total revenue generated by a specific customer. Allow users to input the customer ID as a parameter.

DECLARE @CustomerID INT = 1; -- Replace with the desired customer ID

SELECT
    SUM(TotalAmount) AS TotalRevenue
FROM
    Orders
WHERE
    CustomerID = @CustomerID;

--6 Write an SQL query to find the customers who have placed the most orders. List their names and the number of orders they've placed.

Select FirstName, LastName, NumOrders From Customers Where Customerid = (Select Top 1 CustomerID from Orders Group By CustomerID Order By COUNT(OrderID) DESC)

--7 Write an SQL query to find the most popular product category, which is the one with the highest total quantity ordered across all orders
Select TOP 1 p.Description, o.Quantity FROM Products p JOIN OrderDetails o ON p.ProductID = o.ProductID ORDER BY o.Quantity DESC
--8 Write an SQL query to find the customer who has spent the most money (highest total revenue)  on electronic gadgets. List their name and total spending.
SELECT TOP 1 c.FirstName, c.LastName, SUM(o.TotalAmount) AS TotalSpending FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
WHERE p.Description = 'compact'
GROUP BY c.FirstName, c.LastName ORDER BY TotalSpending DESC

--9 Write an SQL query to calculate the average order value (total revenue divided by the number of orders) for all customers.

SELECT
    AVG(TotalAmount) AS AverageOrderValue
FROM
    Orders;

--10 Write an SQL query to find the total number of orders placed by each customer and list their names along with the order coun

SELECT c.FirstName, c.LastName, COUNT(o.OrderID) AS OrderCount FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.FirstName, c.LastName;